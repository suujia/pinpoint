// Code generated by MockGen. DO NOT EDIT.
// Source: ./grpc/pinpoint.pb.go

// Package mock_pinpoint is a generated GoMock package.
package mock_pinpoint

import (
	gomock "github.com/golang/mock/gomock"
	request "github.com/ubclaunchpad/pinpoint/grpc/request"
	response "github.com/ubclaunchpad/pinpoint/grpc/response"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPinpointCoreClient is a mock of PinpointCoreClient interface
type MockPinpointCoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockPinpointCoreClientMockRecorder
}

// MockPinpointCoreClientMockRecorder is the mock recorder for MockPinpointCoreClient
type MockPinpointCoreClientMockRecorder struct {
	mock *MockPinpointCoreClient
}

// NewMockPinpointCoreClient creates a new mock instance
func NewMockPinpointCoreClient(ctrl *gomock.Controller) *MockPinpointCoreClient {
	mock := &MockPinpointCoreClient{ctrl: ctrl}
	mock.recorder = &MockPinpointCoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinpointCoreClient) EXPECT() *MockPinpointCoreClientMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockPinpointCoreClient) GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPinpointCoreClientMockRecorder) GetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPinpointCoreClient)(nil).GetStatus), varargs...)
}

// MockPinpointCoreServer is a mock of PinpointCoreServer interface
type MockPinpointCoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockPinpointCoreServerMockRecorder
}

// MockPinpointCoreServerMockRecorder is the mock recorder for MockPinpointCoreServer
type MockPinpointCoreServerMockRecorder struct {
	mock *MockPinpointCoreServer
}

// NewMockPinpointCoreServer creates a new mock instance
func NewMockPinpointCoreServer(ctrl *gomock.Controller) *MockPinpointCoreServer {
	mock := &MockPinpointCoreServer{ctrl: ctrl}
	mock.recorder = &MockPinpointCoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinpointCoreServer) EXPECT() *MockPinpointCoreServerMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockPinpointCoreServer) GetStatus(arg0 context.Context, arg1 *request.Status) (*response.Status, error) {
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPinpointCoreServerMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPinpointCoreServer)(nil).GetStatus), arg0, arg1)
}
